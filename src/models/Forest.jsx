/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: SimpleMan2101 (https://sketchfab.com/SimpleMan2101)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/forest-camping-75f6849e2fee43a6b070632e7dade3fb
Title: Forest camping
*/

import { useRef , useEffect, useState, Suspense} from "react";
import { useGLTF } from "@react-three/drei"; //useAnimations
import { useThree, useFrame } from "@react-three/fiber";
import {a} from '@react-spring/three';

import ForestScene from '../assets/3D/forest_camping.glb';
import Wolf from "./Wolf";

const Forest = ({ position, rotation, scale, isRotating, setIsRotating, setCurrentStage }) => {
  const forestRef = useRef();
  // const wolfRef = useRef();

  const {gl, viewport} = useThree();
  const { scene, animations,  } = useGLTF(ForestScene);

  // const { actions } = useAnimations(animations, group);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  }

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;

      const delta = (clientX - lastX.current) / viewport.width;
      forestRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
    }
  }

  const handleKeyDown = (e) => {
    if (e.key === 'ArrowLeft') {
      if (!isRotating) setIsRotating(true);
      forestRef.current.rotation.y += 0.01 * Math.PI;
    }
    else if (e.key === 'ArrowRight') {
      if (!isRotating) setIsRotating(true);
      forestRef.current.rotation.y -= 0.01 * Math.PI;
    }
  }

  const handleKeyUp = (e) => {
    if (e.key === 'ArrowLeft' || e.key === 'ArrowRight')
      setIsRotating(false);
  }

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      forestRef.current.rotation.y += rotationSpeed.current;
    }
    else {
      const rotation = forestRef.current.rotation.y;

      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the forest orientation
      switch (true) {
        // case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
        case normalizedRotation >= 5 && normalizedRotation <= 5.5:
          setCurrentStage(1);
          break;
        // case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
        //   setCurrentStage(3);
        //   break;
        // case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
        //   setCurrentStage(2);
        //   break;
        // case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
        //   setCurrentStage(1);
        //   break;
        default:
          setCurrentStage(null);
      }
    }

    // if (wolfRef.current) {
    //   const islandPosition = forestRef.current.position;
    //   const islandRotation = forestRef.current.rotation;

    //   // Calculate wolf position relative to island position
    //   const wolfPosition = [
    //     islandPosition.x + 0, // Adjust X-offset as needed
    //     islandPosition.y + 3, // Adjust Y-offset as needed
    //     islandPosition.z + 0, // Adjust Z-offset as needed
    //   ];

    //   // Set wolf position and rotation, preserving its initial orientation
    //   wolfRef.current.position.set(wolfPosition);
    //   // wolfRef.current.rotation.set(wolfInitialRotation); // Store initial rotation in a variable
    // }
  });

  useEffect(() => {
    const canvas = gl.domElement;

    // Add event listeners to the appropriate target
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointermove", handlePointerMove);
    canvas.addEventListener("pointerup", handlePointerUp);
    document.addEventListener("keyup", handleKeyUp);
    document.addEventListener("keydown", handleKeyDown);

  
    // Cleanup function to remove event listeners when the component unmounts
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointermove", handlePointerMove);
      canvas.removeEventListener("pointerup", handlePointerUp);
      document.removeEventListener("keyup", handleKeyUp);
      document.removeEventListener("keydown", handleKeyDown);
    
    };
  }, [gl, handlePointerDown, handlePointerMove, handlePointerUp]);

  // const Wolf = ({ scale, position, rotation, ref }) => {
  //   // Use the received props instead of hardcoded values
  //   return (
  //     <mesh scale={scale} position={position} rotation={rotation} ref={ref}>
  //       <primitive object={scene} />
  //     </mesh>
  //   );  
  // };


  return (
    <mesh ref={forestRef} scale={scale} position={position} rotation={rotation}>
      <primitive object={scene} />
      {/* {forestRef.current && (
        <Wolf
          scale={[5, 5,5]}
          position={[2, 5, -20]}
          // position={[forestRef.current.position.x + 0, forestRef.current.position.y + 3, forestRef.current.position.z + 0]}
          rotation={[0, 80, 0]}
          
          // wolfRef={wolfRef} // Forward the ref
        /> */}
      {/* )} */}
    </mesh>
  );
}

export default Forest;